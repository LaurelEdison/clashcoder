// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: problems.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProblem = `-- name: CreateProblem :one

INSERT INTO problems (id, created_at, updated_at, title, description, difficulty, time_limit, memory_limit_mb, starter_code)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, title, description, difficulty, starter_code, time_limit, memory_limit_mb
`

type CreateProblemParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Title         string
	Description   string
	Difficulty    string
	TimeLimit     int32
	MemoryLimitMb int32
	StarterCode   string
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) (Problem, error) {
	row := q.db.QueryRowContext(ctx, createProblem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Difficulty,
		arg.TimeLimit,
		arg.MemoryLimitMb,
		arg.StarterCode,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.StarterCode,
		&i.TimeLimit,
		&i.MemoryLimitMb,
	)
	return i, err
}

const getAllProblems = `-- name: GetAllProblems :many

SELECT id, created_at, updated_at, title, description, difficulty, starter_code, time_limit, memory_limit_mb FROM problems
`

func (q *Queries) GetAllProblems(ctx context.Context) ([]Problem, error) {
	rows, err := q.db.QueryContext(ctx, getAllProblems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Problem
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Difficulty,
			&i.StarterCode,
			&i.TimeLimit,
			&i.MemoryLimitMb,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProblemByID = `-- name: GetProblemByID :one

SELECT id, created_at, updated_at, title, description, difficulty, starter_code, time_limit, memory_limit_mb FROM problems
WHERE (id = $1)
`

func (q *Queries) GetProblemByID(ctx context.Context, id uuid.UUID) (Problem, error) {
	row := q.db.QueryRowContext(ctx, getProblemByID, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.StarterCode,
		&i.TimeLimit,
		&i.MemoryLimitMb,
	)
	return i, err
}

const getRandomProblem = `-- name: GetRandomProblem :one
SELECT id, created_at, updated_at, title, description, difficulty, starter_code, time_limit, memory_limit_mb FROM problems ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomProblem(ctx context.Context) (Problem, error) {
	row := q.db.QueryRowContext(ctx, getRandomProblem)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Difficulty,
		&i.StarterCode,
		&i.TimeLimit,
		&i.MemoryLimitMb,
	)
	return i, err
}

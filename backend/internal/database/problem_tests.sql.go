// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: problem_tests.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProblemTests = `-- name: CreateProblemTests :one
INSERT INTO problem_tests(id, created_at, updated_at, problem_id, test_code)
VALUES($1,$2,$3,$4,$5)
RETURNING id, created_at, updated_at, problem_id, test_code
`

type CreateProblemTestsParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	ProblemID uuid.UUID
	TestCode  string
}

func (q *Queries) CreateProblemTests(ctx context.Context, arg CreateProblemTestsParams) (ProblemTest, error) {
	row := q.db.QueryRowContext(ctx, createProblemTests,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProblemID,
		arg.TestCode,
	)
	var i ProblemTest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProblemID,
		&i.TestCode,
	)
	return i, err
}

const getLatestProblemTestByProblemID = `-- name: GetLatestProblemTestByProblemID :one
SELECT id, created_at, updated_at, problem_id, test_code FROM problem_tests 
WHERE problem_id = $1
ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestProblemTestByProblemID(ctx context.Context, problemID uuid.UUID) (ProblemTest, error) {
	row := q.db.QueryRowContext(ctx, getLatestProblemTestByProblemID, problemID)
	var i ProblemTest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProblemID,
		&i.TestCode,
	)
	return i, err
}

const getProblemTestByID = `-- name: GetProblemTestByID :one
SELECT id, created_at, updated_at, problem_id, test_code FROM problem_tests WHERE id= $1
`

func (q *Queries) GetProblemTestByID(ctx context.Context, id uuid.UUID) (ProblemTest, error) {
	row := q.db.QueryRowContext(ctx, getProblemTestByID, id)
	var i ProblemTest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProblemID,
		&i.TestCode,
	)
	return i, err
}

const getProblemTestsByProblemID = `-- name: GetProblemTestsByProblemID :many
SELECT id, created_at, updated_at, problem_id, test_code FROM problem_tests WHERE problem_id = $1
`

func (q *Queries) GetProblemTestsByProblemID(ctx context.Context, problemID uuid.UUID) ([]ProblemTest, error) {
	rows, err := q.db.QueryContext(ctx, getProblemTestsByProblemID, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProblemTest
	for rows.Next() {
		var i ProblemTest
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProblemID,
			&i.TestCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

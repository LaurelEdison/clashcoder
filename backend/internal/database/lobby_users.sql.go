// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: lobby_users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLobbyUser = `-- name: CreateLobbyUser :one
INSERT INTO lobby_users(lobby_id, user_id, joined_at, role)
VALUES($1,$2,$3,$4)
RETURNING lobby_id, user_id, joined_at, role
`

type CreateLobbyUserParams struct {
	LobbyID  uuid.UUID
	UserID   uuid.UUID
	JoinedAt time.Time
	Role     string
}

func (q *Queries) CreateLobbyUser(ctx context.Context, arg CreateLobbyUserParams) (LobbyUser, error) {
	row := q.db.QueryRowContext(ctx, createLobbyUser,
		arg.LobbyID,
		arg.UserID,
		arg.JoinedAt,
		arg.Role,
	)
	var i LobbyUser
	err := row.Scan(
		&i.LobbyID,
		&i.UserID,
		&i.JoinedAt,
		&i.Role,
	)
	return i, err
}

const getHostFromLobbyID = `-- name: GetHostFromLobbyID :one
SELECT lobby_id, user_id, joined_at, role FROM lobby_users WHERE lobby_id = $1 AND role = 'host'
`

func (q *Queries) GetHostFromLobbyID(ctx context.Context, lobbyID uuid.UUID) (LobbyUser, error) {
	row := q.db.QueryRowContext(ctx, getHostFromLobbyID, lobbyID)
	var i LobbyUser
	err := row.Scan(
		&i.LobbyID,
		&i.UserID,
		&i.JoinedAt,
		&i.Role,
	)
	return i, err
}

const getLobbyUsersByLobbyID = `-- name: GetLobbyUsersByLobbyID :many
SELECT lobby_id, user_id, joined_at, role FROM lobby_users WHERE lobby_id = $1
`

func (q *Queries) GetLobbyUsersByLobbyID(ctx context.Context, lobbyID uuid.UUID) ([]LobbyUser, error) {
	rows, err := q.db.QueryContext(ctx, getLobbyUsersByLobbyID, lobbyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LobbyUser
	for rows.Next() {
		var i LobbyUser
		if err := rows.Scan(
			&i.LobbyID,
			&i.UserID,
			&i.JoinedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLobbyUserFromLobby = `-- name: RemoveLobbyUserFromLobby :exec
DELETE FROM lobby_users WHERE lobby_id = $1 AND user_id = $2
`

type RemoveLobbyUserFromLobbyParams struct {
	LobbyID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) RemoveLobbyUserFromLobby(ctx context.Context, arg RemoveLobbyUserFromLobbyParams) error {
	_, err := q.db.ExecContext(ctx, removeLobbyUserFromLobby, arg.LobbyID, arg.UserID)
	return err
}

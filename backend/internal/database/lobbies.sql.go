// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: lobbies.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLobby = `-- name: CreateLobby :one
INSERT INTO lobbies(id, created_at, updated_at, invite_code, max_users, started_at, ended_at, status,ready_state)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9)
RETURNING id, created_at, updated_at, invite_code, max_users, started_at, ended_at, status, ready_state, problem_id
`

type CreateLobbyParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	InviteCode string
	MaxUsers   int32
	StartedAt  sql.NullTime
	EndedAt    sql.NullTime
	Status     string
	ReadyState bool
}

func (q *Queries) CreateLobby(ctx context.Context, arg CreateLobbyParams) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, createLobby,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.InviteCode,
		arg.MaxUsers,
		arg.StartedAt,
		arg.EndedAt,
		arg.Status,
		arg.ReadyState,
	)
	var i Lobby
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InviteCode,
		&i.MaxUsers,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ReadyState,
		&i.ProblemID,
	)
	return i, err
}

const getLobbyById = `-- name: GetLobbyById :one
SELECT id, created_at, updated_at, invite_code, max_users, started_at, ended_at, status, ready_state, problem_id FROM lobbies WHERE id = $1
`

func (q *Queries) GetLobbyById(ctx context.Context, id uuid.UUID) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, getLobbyById, id)
	var i Lobby
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InviteCode,
		&i.MaxUsers,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ReadyState,
		&i.ProblemID,
	)
	return i, err
}

const selectProblem = `-- name: SelectProblem :exec
UPDATE lobbies
SET problem_id = $2
WHERE id = $1
`

type SelectProblemParams struct {
	ID        uuid.UUID
	ProblemID uuid.NullUUID
}

func (q *Queries) SelectProblem(ctx context.Context, arg SelectProblemParams) error {
	_, err := q.db.ExecContext(ctx, selectProblem, arg.ID, arg.ProblemID)
	return err
}

const startLobby = `-- name: StartLobby :exec
UPDATE lobbies
SET problem_id = $2,
status = $3,
started_at = $4,
ended_at = $5,
updated_at = $6
WHERE id = $1
`

type StartLobbyParams struct {
	ID        uuid.UUID
	ProblemID uuid.NullUUID
	Status    string
	StartedAt sql.NullTime
	EndedAt   sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) StartLobby(ctx context.Context, arg StartLobbyParams) error {
	_, err := q.db.ExecContext(ctx, startLobby,
		arg.ID,
		arg.ProblemID,
		arg.Status,
		arg.StartedAt,
		arg.EndedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateLobbyStartEnd = `-- name: UpdateLobbyStartEnd :exec
UPDATE lobbies
SET started_at = $2,
ended_at = $3
WHERE id = $1
`

type UpdateLobbyStartEndParams struct {
	ID        uuid.UUID
	StartedAt sql.NullTime
	EndedAt   sql.NullTime
}

func (q *Queries) UpdateLobbyStartEnd(ctx context.Context, arg UpdateLobbyStartEndParams) error {
	_, err := q.db.ExecContext(ctx, updateLobbyStartEnd, arg.ID, arg.StartedAt, arg.EndedAt)
	return err
}

const updateLobbyStatus = `-- name: UpdateLobbyStatus :exec
UPDATE lobbies
SET status = $2
WHERE id = $1
`

type UpdateLobbyStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateLobbyStatus(ctx context.Context, arg UpdateLobbyStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateLobbyStatus, arg.ID, arg.Status)
	return err
}
